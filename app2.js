// 1.2 (это обязательное задание) Сделайте в стиле es5, а затем в стиле es6 (по
//     аналогии из дополнительных видео -> 3 примеры наследования -> механика наследования),
//     а) конструктор Post, который принимает параметры author, text, date и сохраняет
//     их как свойства объекта. Объекты типа Post должны иметь метод edit, который будет
//     принимать текст и записывать его в свойство text объекта.
//     б) конструктор AttachedPost, который принимает параметры author, text, date.
//     Проинициализируйте эти свойства с помощью конструктора Post, чтобы не
//     дублировать код. Также в конструкторе AttachedPost должно создаваться свойство
//     highlighted со значением false. Унаследуйте в объектах типа AttachedPost методы из Post.
//     Объекты типа AttachedPost должны иметь метод makeTextHighlighted,
//     который будет назначать свойству highlighted значение true.



// решение здачи в стиле es5 1.2 а)
'use strict'

// создаем конструктор Post который принимает параметры author, text, date и сохраняет их как свойства объекта.
function Post(author, text, date) {
    this.author = author;
    this.text = text;
    this.date = date;
}
// создаем метод edit который возвращет в конструктор Post значение свойства text  
Post.prototype.edit = function (text) {
    this.text = text;
}


// создаем объект Role с парматерами author text date, который наследует свойства конструктора Post
let Role = new Post("Alex", "", "дата");
//Вызываем метод edit, который передает значение "какой-то текст" в свойство text  конструктора Post
Role.edit("какой-то текст es5")
alert(Role.text);